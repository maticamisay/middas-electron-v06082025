import { app, BrowserWindow, ipcMain } from 'electron';
import ProductDatabase from './database/productDb';
import { Product, ProductFilters } from './types/product';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Initialize database
let productDb: ProductDatabase;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Initialize database and IPC handlers
const initializeApp = () => {
  productDb = new ProductDatabase();
  setupIpcHandlers();
  createWindow();
};

// Setup IPC handlers for product operations
const setupIpcHandlers = () => {
  // Create product
  ipcMain.handle('product:create', async (_, productData) => {
    try {
      return await productDb.createProduct(productData);
    } catch (error) {
      throw error;
    }
  });

  // Get all products with filters
  ipcMain.handle('product:getAll', async (_, filters?: ProductFilters) => {
    try {
      return await productDb.getAllProducts(filters);
    } catch (error) {
      throw error;
    }
  });

  // Get product by ID
  ipcMain.handle('product:getById', async (_, id: string) => {
    try {
      return await productDb.getProductById(id);
    } catch (error) {
      throw error;
    }
  });

  // Update product
  ipcMain.handle('product:update', async (_, id: string, updates: Partial<Product>) => {
    try {
      return await productDb.updateProduct(id, updates);
    } catch (error) {
      throw error;
    }
  });

  // Delete product
  ipcMain.handle('product:delete', async (_, id: string) => {
    try {
      return await productDb.deleteProduct(id);
    } catch (error) {
      throw error;
    }
  });

  // Get product statistics
  ipcMain.handle('product:getStats', async () => {
    try {
      return await productDb.getProductStats();
    } catch (error) {
      throw error;
    }
  });

  // Get low stock products
  ipcMain.handle('product:getLowStock', async () => {
    try {
      return await productDb.getLowStockProducts();
    } catch (error) {
      throw error;
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', initializeApp);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
